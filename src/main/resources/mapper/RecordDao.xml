<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zyg.exam.dao.RecordDao">
  <resultMap id="BaseResultMap" type="com.zyg.exam.model.Record">
    <id column="recordid" jdbcType="INTEGER" property="recordid" />
    <result column="studentid" jdbcType="INTEGER" property="studentid" />
    <result column="grade" jdbcType="INTEGER" property="grade" />
    <result column="monitor" jdbcType="VARCHAR" property="monitor" />
    <result column="paperid" jdbcType="INTEGER" property="paperid" />
  </resultMap>
  <resultMap id="RecordVO" type="com.zyg.exam.common.VO.RecordVO">
    <id column="recordid" jdbcType="INTEGER" property="recordId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="grade" jdbcType="INTEGER" property="grade" />
    <result column="starttime" jdbcType="DATE" property="startTime" />
    <result column="coursename" jdbcType="VARCHAR" property="courseName" />
    <result column="classname" jdbcType="VARCHAR" property="className" />
    <result column="status" jdbcType="VARCHAR" property="status"/>
    <result column="monitor" jdbcType="VARCHAR" property="monitor"/>
    <result column="value" jdbcType="INTEGER" property="value"/>
  </resultMap>
  <resultMap id="Average" type="com.zyg.exam.common.VO.BarVO">
    <result column="maxsource" property="maxScore"/>
    <result column="minsource" property="minScore"/>
    <result column="average" property="average"/>
    <result column="variance" property="variance"/>
    <result column="classname" property="classname"/>
  </resultMap>
  <resultMap id="Spread" type="com.zyg.exam.common.VO.SpreadVO">
    <result column="classid" property="classid"/>
    <result column="num1" property="num1"/>
    <result column="num2" property="num2"/>
    <result column="num3" property="num3"/>
    <result column="num4" property="num4"/>
    <result column="num5" property="num5"/>
  </resultMap>
  <resultMap id="EverQuestion" type="com.zyg.exam.common.VO.EverQuestion">
    <result column="questionid" property="questionid"/>
    <result column="content" property="content"/>
    <result column="maxnum" property="maxnum"/>
    <result column="minnum" property="minnum"/>
    <result column="avgnum" property="avgnum"/>
    <result column="percent" property="percent"/>
  </resultMap>
  <resultMap id="LineVo" type="com.zyg.exam.common.VO.LineVO">
    <result column="maxsource" property="maxScore"/>
    <result column="minsource" property="minScore"/>
    <result column="avgsource" property="avgScore"/>
    <result column="time" property="time"/>
  </resultMap>
  <resultMap id="LittlePaper" type="com.zyg.exam.common.VO.LittlePaper">
    <result column="avgnum" property="avgnum"/>
    <result column="classname" property="classname"/>
    <result column="teachername" property="teachname"/>
    <result column="coursename" property="coursename"/>
    <result column="stunum" property="stunum"/>
    <result column="num0" property="num0"/>
    <result column="num1" property="num1"/>
    <result column="num2" property="num2"/>
    <result column="num3" property="num3"/>
    <result column="num4" property="num4"/>
    <result column="year" property="year"/>
    <result column="no" property="no"/>
    <result column="paperid" property="paperid"/>
    <result column="classid" property="classid"/>
  </resultMap>
  <resultMap id="largePaper1" type="com.zyg.exam.common.VO.LargePaper1">
    <result column="no" property="time"/>
    <result column="courseid" property="courseid"/>
    <result column="coursename" property="coursename"/>
    <result column="courseid" property="courseid"/>
  </resultMap>
  <resultMap id="largePaper2" type="com.zyg.exam.common.VO.LargePaper2">
    <result column="chapternum" property="chapternum"/>
    <result column="type" property="type"/>
    <result column="num" property="num"/>
    <result column="maxnum" property="maxnum"/>
    <result column="minnum" property="minnum"/>
    <result column="avgnum" property="avgnum"/>
    <result column="stunum" property="stunum"/>
    <result column="num0" property="num0"/>
    <result column="num1" property="num1"/>
    <result column="num2" property="num2"/>
    <result column="num3" property="num3"/>
    <result column="num4" property="num4"/>
  </resultMap>
  <sql id="Base_Column_List">
    recordid, studentid, grade, monitor, paperid
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from record
    where recordid = #{recordid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from record
    where recordid = #{recordid,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="recordid" keyProperty="recordid" parameterType="com.zyg.exam.model.Record" useGeneratedKeys="true">
    insert into record (studentid, grade, monitor, 
      paperid)
    values (#{studentid,jdbcType=INTEGER}, #{grade,jdbcType=INTEGER}, #{monitor,jdbcType=VARCHAR},
      #{paperid,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" keyColumn="recordid" keyProperty="recordid" parameterType="com.zyg.exam.model.Record" useGeneratedKeys="true">
    insert into record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="studentid != null">
        studentid,
      </if>
      <if test="grade != null">
        grade,
      </if>
      <if test="monitor != null">
        monitor,
      </if>
      <if test="paperid != null">
        paperid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="studentid != null">
        #{studentid,jdbcType=INTEGER},
      </if>
      <if test="grade != null">
        #{grade,jdbcType=INTEGER},
      </if>
      <if test="monitor != null">
        #{monitor,jdbcType=VARCHAR},
      </if>
      <if test="paperid != null">
        #{paperid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.zyg.exam.model.Record">
    update record
    <set>
      <if test="studentid != null">
        studentid = #{studentid,jdbcType=INTEGER},
      </if>
      <if test="grade != null">
        grade = #{grade,jdbcType=INTEGER},
      </if>
      <if test="monitor != null">
        monitor = #{monitor,jdbcType=VARCHAR},
      </if>
      <if test="paperid != null">
        paperid = #{paperid,jdbcType=INTEGER},
      </if>
    </set>
    where recordid = #{recordid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zyg.exam.model.Record">
    update record
    set studentid = #{studentid,jdbcType=INTEGER},
      grade = #{grade,jdbcType=INTEGER},
      monitor = #{monitor,jdbcType=VARCHAR},
      paperid = #{paperid,jdbcType=INTEGER}
    where recordid = #{recordid,jdbcType=INTEGER}
  </update>

  <select id="selectByUserId"  resultMap="RecordVO,count">
    <bind name="key_offset" value="(pageIndex-1)*pageSize"></bind>
    select SQL_CALC_FOUND_ROWS * from(select * from(select recordid,grade,user.name,record.status,record.monitor from record join user on record.studentid=user.id where record.studentid=(select id from user where name=#{name,jdbcType=VARCHAR}))a
    ,
   (select DISTINCT course.coursename,a.starttime from course join  (select b.courseid,b.starttime from record c join paper b on c.paperid=b.paperid where c.studentid=(select id from user where name=#{name,jdbcType=VARCHAR}))a
       on a.courseid=course.courseid)b,
    (select sum(value*count) value from (select b.paperid from record c join paper b on c.paperid=b.paperid where c.studentid=(select id from user where name=#{name,jdbcType=VARCHAR}))a left join strategy on strategy.paperid=a.paperid)c group by a.recordid)a limit #{key_offset},#{pageSize};select found_rows() count;
  </select>

  <select id="selectByCourse" resultMap="RecordVO,count">
    <bind name="key_offset" value="(pageIndex-1)*pageSize"></bind>
    select SQL_CALC_FOUND_ROWS * from(select a.*,sum(count*value) value    from(select a.recordid,a.starttime,a.coursename,a.name,class.classname,a.grade,a.status,a.monitor,a.paperid from class join
        (select a.recordid,a.starttime,a.coursename,user.name,user.classid,a.grade,a.status,a.monitor,a.paperid from user join(select recordid,studentid,a.starttime,a.coursename,grade,record.status,record.monitor,a.paperid
        from record join (select  paper.courseid,course.coursename,paperid,starttime from paper join course on paper.courseid=course.courseid where course.courseid=#{courseid,jdbcType=INTEGER})a
    on a.paperid=record.paperid

    <if test="status!=null and status!=''">
      where record.status=#{status,jdbcType=VARCHAR}
    </if>
    )a on user.id=a.studentid)a on class.classid=a.classid)a left join
    strategy on strategy.paperid=a.paperid group by recordid
    )a limit #{key_offset},#{pageSize};select found_rows() count;
  </select>

  <select id="selectByClass" resultMap="RecordVO,count">
    <bind name="key_offset" value="(pageIndex-1)*pageSize"></bind>
    select SQL_CALC_FOUND_ROWS * from(select a.*,sum(count*value) value    from (select a.grade,a.recordid,a.name,a.classname,a.starttime,course.coursename,a.status,a.monitor,a.paperid from course join (select a.grade,a.recordid,a.name,a.classname,paper.starttime,paper.courseid,a.status,a.monitor,a.paperid from paper join (select grade,recordid,paperid,a.name,a.classname,record.status,record.monitor from record join (select user.id,user.name,class.classname from user join class on class.classid=user.classid where class.classid=#{classid,jdbcType=INTEGER})a on
    record.studentid=a.id
    <if test="status!=null and status!=''">
      where record.status=#{status,jdbcType=VARCHAR}
    </if>
    )a on paper.paperid=a.paperid)a on course.courseid=a.courseid)a left join
    strategy on strategy.paperid=a.paperid group by recordid





   )a limit #{key_offset},#{pageSize};select found_rows() count;
  </select>

  <select id="listRecord" resultMap="RecordVO,count">
    <bind name="key_offset" value="(pageIndex-1)*pageSize"></bind>
    select SQL_CALC_FOUND_ROWS * from(select a.*,sum(count*value) value    from (select a.recordid,a.starttime,a.coursename,a.name,class.classname,a.grade,a.status,a.monitor,a.paperid from class join
    (select a.recordid,a.starttime,a.coursename,user.name,user.classid,a.grade,a.status,a.monitor,a.paperid from user join(select recordid,studentid,a.starttime,a.coursename,grade,record.status,record.monitor,a.paperid
    from record join (select  paper.courseid,course.coursename,paperid,starttime from paper join course on paper.courseid=course.courseid )a
    on a.paperid=record.paperid
    <if test="status!=null and status!=''">
      where record.status=#{status,jdbcType=VARCHAR}
    </if>)a on user.id=a.studentid)a on class.classid=a.classid)a left join
    strategy on strategy.paperid=a.paperid group by recordid)a



     limit #{key_offset},#{pageSize};select found_rows() count;
  </select>

  <select id="selectMonitor" resultType="java.lang.String">
    select monitor from record
    where recordid=#{recordId,jdbcType=INTEGER}
  </select>

  <update id="setGrade">
    update record set grade=#{grade,jdbcType=INTEGER},status='已批改'
    where recordid=#{recordid,jdbcType=INTEGER}
  </update>
  <select id="selectAverage" resultMap="Average">
    select classname,max(grade) maxsource,min(grade) minsource,avg(grade) average,VAR_SAMP(grade) variance,a.classid from (select classid,grade from(select studentid,grade from record where paperid=#{paperid,jdbcType=INTEGER})a left join user on user.id=a.studentid)a left join class on class.classid=a.classid
    <if test="classids !=null   ">where a.classid in <foreach collection="classids" item="classid" open="(" separator="," close=")">
      #{classid}
    </foreach></if> GROUP BY a.classid
  </select>
  <select id="selectSpread" resultMap="Spread">
    select a.classid,sum(if(credit='优秀',count,0)) as num1,sum(if(credit='良好',count,0)) as num2,
    sum(if(credit='稳定',count,0)) as num3,sum(if(credit='及格',count,0)) as num4,
     sum(if(credit='不及格',count,0)) as num5 from(select count(a.studentid) count,a.credit,a.classid from  	(select classid,a.studentid,( case
    when a.grade >= 90 then '优秀'
    when a.grade >= 80 and a.grade &lt; 90 then '良好'
    when a.grade >= 70 and a.grade &lt; 80 then '稳定'
    when a.grade >= 60 and a.grade &lt; 70 then '及格'
    when a.grade &lt; 60 then '不及格'
    end ) as credit
    from	(select studentid,grade from record  <if test="paperid!=null and paperid!=''">
    where paperid=#{paperid,jdbcType=INTEGER}</if>)a left join user
    on a.studentid=user.id)a GROUP BY a.classid,a.credit)a  <if test="classid!=null and classid!=''">
    where a.classid=#{classid,jdbcType=INTEGER}</if> group by a.classid
  </select>
  <select id="selectClass" resultType="com.zyg.exam.model.Class">
    select distinct classname,a.classid from  	(select classid,a.studentid
     from	(select studentid,grade from record where paperid=#{paperid,jdbcType=INTEGER})a left join user
       on a.studentid=user.id)a left join class on a.classid=class.classid
  </select>
  <select id="selectEverQues" resultMap="EverQuestion">
    select a.questionid,a.content,if(type='简答' or type='编程',max(credit),null) as maxnum,if(type='简答' or type='编程',min(credit),null) as minnum,if(type='简答' or type='编程',AVG(credit),null) as avgnum,if(type='简答' or type='编程',if(credit=0,count(credit),0)/count(credit),null) as percent,a.classid
    from (select user.classid,a.type,a.questionid,a.credit,a.content,a.studentid
    from	(select type,a.questionid,a.credit,content,a.studentid
    from(select credit,questionid,a.studentid
    from (select recordid,studentid
    from record <if test="paperid!=null and paperid!=''">where paperid=#{paperid,jdbcType=INTEGER}</if> )a left join answer on answer.recordid=a.recordid)a left join question on question.subjectid=a.questionid)a left join user on a.studentid=user.id)a <if test="classid!=null and classid!=''">where classid=#{classid,jdbcType=INTEGER}</if> GROUP BY questionid,classid
  </select>
  <select id="selectTendency" resultMap="LineVo">
    select max(grade) maxsource,min(grade) minsource,avg(grade) avgsource,a.paperid,starttime time from (select paperid,starttime from paper where courseid=#{courseid,jdbcType=INTEGER})a left join record on record.paperid=a.paperid <if test="firsttime!=null and firsttime!=''">where year(starttime)&lt;=year(#{firsttime,jdbcType=DATETIME})
    and year(starttime)>year(#{lasttime,jdbcType=DATETIME})-3</if>
    <if test="firsttime=='' and lasttime==''">
      where year(starttime)&lt;=year(now())
      and year(starttime)>year(now())-3
    </if>
    group by paperid
  </select>
  <select id="littlePaper" resultMap="LittlePaper">
    select * from (select a.classid,sum(if(credit='优秀',count,0)) as num4,sum(if(credit='良好',count,0)) as num3,sum(if(credit='稳定',count,0)) as num2,sum(if(credit='及格',count,0)) as num1,sum(if(credit='不及格',count,0)) as num0 from(select count(a.studentid) count,a.credit,a.classid from (select classid,a.studentid,( case when a.grade >= 90 then '优秀' when a.grade >= 80 and a.grade &lt; 90 then '良好' when a.grade >= 70 and a.grade &lt; 80 then '稳定' when a.grade >= 60 and a.grade &lt; 70 then '及格' when a.grade &lt; 60 then '不及格' end ) as credit from (select studentid,grade from record where paperid=#{paperid,jdbcType=INTEGER} )a left join user on a.studentid=user.id)a GROUP BY a.classid,a.credit)a  group by a.classid)a
    ,
    (select avg(grade) avgnum,a.classname,a.coursename,a.teachername,a.stunum,a.classid,a.year,a.no,a.paperid from
    (select a.coursename,a.teachername,classname,count(id) stunum,a.paperid,id,a.classid,a.year,a.no from
    (select a.classid,a.coursename,a.teachername,classname,a.paperid,a.year,a.no
    from  (select classid,a.coursename,a.teachername,a.paperid,a.year,a.no
    from(select a.coursename,user.name teachername,a.teachid,a.paperid,a.year,a.no
    from (select a.coursename,teacherid,teachid,a.paperid,a.year,a.no
    from(select coursename,paper.courseid,paperid,year(starttime) year,if(month(starttime)>=2 and month(starttime)&lt;7,concat(year(starttime)-1,'-',year(starttime),'学年第二学期'),concat(year(starttime),'-',year(starttime)+1,'第一学期'))  no	from course left join paper on paper.courseid=course.courseid where paperid=#{paperid,jdbcType=INTEGER})a left join teach on teach.courseid=a.courseid)a left join user on user.id=a.teacherid)a left join getclass on a.teachid=getclass.teachid)a left join class on class.classid=a.classid)a left join user on a.classid=user.classid group by classname)a left join record on record.studentid=a.id where record.paperid=#{paperid,jdbcType=INTEGER} GROUP BY classname)b where a.classid=b.classid
  </select>
  <select id="largePaper1" resultMap="largePaper1">
    select paperid,paper.courseid,coursename,if(month(starttime)>=2 and month(starttime)&lt;7,concat(year(starttime)-1,'-',year(starttime),'学年第二学期'),concat(year(starttime),'-',year(starttime)+1,'第一学期')) no from paper left join course on paper.courseid=course.courseid where paperid=#{paperid,jdbcType=INTEGER}
  </select>
  <select id="largePaper2" resultMap="largePaper2">
    select * from(select count/count(chapter.chapterid)*100 chapternum,a.type from  (select count(distinct chapterid) count,a.paperid,a.courseid,group_concat(distinct type) type from(select questionid,paper.paperid,courseid from paper left join paper_question on paper.paperid=paper_question.paperid where paper.paperid=#{paperid,jdbcType=INTEGER})a left join question on question.subjectid=a.questionid)a left join chapter on a.courseid=chapter.courseid)a
            ,
                 (select a.object/b.subject num from (select sum(credit) object from(select type,strategyid,value*count credit from paper left join strategy on paper.paperid=strategy.paperid where paper.paperid=#{paperid,jdbcType=INTEGER})a where a.type='选择' or a.type='判断')a
                         ,
                                                     (select sum(credit) subject from(select type,strategyid,value*count credit from paper left join strategy on paper.paperid=strategy.paperid where paper.paperid=#{paperid,jdbcType=INTEGER})a where a.type='填空' or a.type='简答' or a.type='编程')b)b,
                 (select max(grade) maxnum,min(grade) minnum,avg(grade) avgnum,count(studentid) stunum from record where paperid=#{paperid,jdbcType=INTEGER})c,
    (select if(grade&lt;60,count(studentid),0) num0,if(grade>=60 and grade&lt;70,count(studentid),0) num1,if(grade>=70 and grade&lt;80,count(studentid),0) num2,if(grade>=80 and grade&lt;90,count(studentid),0) num3,if(grade>=90,count(studentid),0) num4 from record where paperid=#{paperid,jdbcType=INTEGER})d
  </select>
</mapper>